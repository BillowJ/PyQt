# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import time
from MyProject.pac.spiders.LianJia import LianjiaSpider
from twisted.internet import reactor
from multiprocessing import Process, Manager
from scrapy.crawler import CrawlerProcess
import  os

def crawl(Q, Path):
    Path = Path
    runner = CrawlerProcess(settings={
        'FILE_PATH' : Path,
        'ITEM_PIPELINES' : { "MyProject.pac.pipelines.PacPipeline" : 300 },
        'LOG_LEVEL' : 'ERROR',
        'USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36'
    })
    #
    runner.crawl(LianjiaSpider, Q = Q)
    runner.start()

class LogThread(QtCore.QThread):
    sig = QtCore.pyqtSignal(str)
    def __init__(self, MainGui):
        super(LogThread, self).__init__()
        self.MainGui = MainGui

    def run(self):
        while True:
            if not self.MainGui.Q.empty():
                if self.MainGui.Q.get() == 'Finish':
                    self.MainGui.textBrowser.append("--------Finish-----------")
                    print("finished")
                    break
                self.sig.emit(self.MainGui.Q.get())
                self.msleep(10)
                QtWidgets.QApplication.processEvents()
            else:
                QtWidgets.QApplication.processEvents()


class Ui_subForm_1(QtWidgets.QWidget, object):
    def __init__(self):
        super(Ui_subForm_1, self).__init__()
        self.setupUi(self)
        self.Q = Manager().Queue(maxsize=500)
        self.logThread = LogThread(self)
        # self.pool = ThreadPoolExecutor(max_workers=3)
        self.logThread.sig.connect(self.update_text)

    def setupUi(self, subForm_1):
        subForm_1.setObjectName("subForm_1")
        subForm_1.resize(731, 531)

        self.frame = QtWidgets.QFrame(subForm_1)
        self.frame.setGeometry(QtCore.QRect(20, 30, 701, 131))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)

        self.gridLayout_2 = QtWidgets.QGridLayout(subForm_1)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")

        self.textBrowser = QtWidgets.QTextBrowser(subForm_1)
        self.textBrowser.setGeometry(QtCore.QRect(20, 180, 711, 341))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.label = QtWidgets.QLabel(subForm_1)
        self.label.setGeometry(QtCore.QRect(20, 0, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")

        #self.frame.setWindowOpacity()
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(120, 80, 151, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.crawl_slot)

        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(540, 20, 121, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.chose_file_path)

        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(50, 20, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(160, 20, 341, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setText(os.getcwd())

        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(420, 80, 161, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.crawl_stop)

        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame, 1, 0, 1, 1)
        self.gridLayout_2.addWidget(self.textBrowser, 2, 0, 1, 1)

        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 2)
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.pushButton, 1, 0, 1, 2)
        self.gridLayout.addWidget(self.pushButton_2, 0, 3, 1, 1)
        self.gridLayout.addWidget(self.pushButton_3, 1, 2, 1, 2)

        self.retranslateUi(subForm_1)
        QtCore.QMetaObject.connectSlotsByName(subForm_1)


    def retranslateUi(self, subForm_1):
        _translate = QtCore.QCoreApplication.translate
        subForm_1.setWindowTitle(_translate("subForm_1", "Form"))
        self.label.setText(_translate("subForm_1", "爬虫选项:"))
        self.pushButton.setText(_translate("subForm_1", "开始爬取"))
        self.pushButton_2.setText(_translate("subForm_1", "选择路径"))
        self.label_2.setText(_translate("subForm_1", "保存路径："))
        self.pushButton_3.setText(_translate("subForm_1", "停止爬取"))

    def chose_file_path(self):
        Path = QtWidgets.QFileDialog.getExistingDirectory()
        FILE_PATH = str(Path)
        self.lineEdit.setText(Path)
        print(FILE_PATH)
        print(Path)


        #创建新的线程开始爬取任务
    def crawl_slot(self):
        Path = self.lineEdit.text()
        self.p = Process(target=crawl, args=(self.Q, Path))
        self.p.start()
        self.logThread.start()

    def crawl_stop(self):
        print("停止线程")
        try:
            self.p.terminate()
            self.logThread.terminate()
        except :
            print('线程尚未开始')

    def update_text(self, msg):
        cursor = self.textBrowser.textCursor()
        pos = len(self.textBrowser.toPlainText())
        cursor.setPosition(pos)
        self.textBrowser.setTextCursor(cursor)
        self.textBrowser.append(msg)
